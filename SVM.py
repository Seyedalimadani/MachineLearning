# -*- coding: utf-8 -*-
"""SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lhwqj67cC5TBW4XnZ468XJmXG2rdyZeV

work very well for high dimensional data and are allow for us to classify data that does not have a linear correspondence
Attempting to use K Nearest Neighbors to do this would likely give us a very low accuracy score and is not favorable
"""

import sklearn
from sklearn import svm
from sklearn import datasets

"""now that we have learned this we will use the data sets that come with sklearn. These are much nicer to work with and have some nice methods that make loading in data very quick."""

cancer = datasets.load_breast_cancer()

"""To see a list of the features and labels in the data set we can do:"""

print("Features: ", cancer.feature_names)
print("Labels: ", cancer.target_names)

"""we have loaded in our data set it is time to split it into training and testing data"""

x = cancer.data  # All of the features
y = cancer.target  # All of the labels

x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split(x, y, test_size=0.2)

"""If we want to have a look at our data we can print the first few instances."""

print(x_train[:5], y_train[:5])

"""We can simply create a new model and call .fit() on our training data."""

clf = svm.SVC()
clf.fit(x_train, y_train)

"""To score our data we will use a useful tool from the sklearn module."""

from sklearn import metrics

y_pred = clf.predict(x_test) # Predict values for our test data

acc = metrics.accuracy_score(y_test, y_pred) # Test them against our correct values
print(acc)

"""Our accuracy is close to 60% and that is horrible! Looks like we need to add something else.Kernel!

The reason we received such a low accuracy score was we forgot to add a kernel! We need to specify which kernel we should use to increase our accuracy.

We will use linear for this data-set.
"""

clf = svm.SVC(kernel="linear")
clf.fit(x_train, y_train)
y_pred = clf.predict(x_test) # Predict values for our test data
acc = metrics.accuracy_score(y_test, y_pred) # Test them against our correct values
print(acc)